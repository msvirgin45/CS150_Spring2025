{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## What We Looked At Last Time\n",
    "* We looked in our last module at the necessity of using **conditional statements** to make decisions within code.\n",
    "* Throughout the process, we saw examples of simple **if** statements, as well as the slightly more nuanced **if-else** and **if-elif-else** statements.\n",
    "* Along the way, we looked in more detail at comparison operators (`==`, `!=`, `>=`, etc.), as well as the principal logical operators (**and**, **or**, **not**)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "## What We'll Look At In This Module\n",
    "* We'll move today into a discussion of **repetition** statements\n",
    "* More specifically, we look at the syntax and examples of **while** loops and **for** loops. \n",
    "* Along the way we'll touch on complications that can pop up when constructing loops (ex: infinite looping)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The first multiple of 5 is 5\n",
      "The second multiple of 5 is 10\n",
      "The third multiple of 5 is 15\n",
      "The fourth multiple of 5 is 20\n",
      "The fifth multiple of 5 is 25\n"
     ]
    }
   ],
   "source": [
    "print('The first multiple of 5 is ' + str(1*5))\n",
    "print('The second multiple of 5 is ' + str(2*5))\n",
    "print('The third multiple of 5 is ' + str(3*5))\n",
    "print('The fourth multiple of 5 is ' + str(4*5))\n",
    "print('The fifth multiple of 5 is ' + str(5*5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Day 1 of the week is Sunday\n",
      "Day 2 of the week is Monday\n",
      "Day 3 of the week is Tuesday\n"
     ]
    }
   ],
   "source": [
    "daysoftheweek = ['Sunday', 'Monday','Tuesday','Wednesday','Thursday','Friday','Saturday']\n",
    "print('Day 1 of the week is ' + daysoftheweek[0])\n",
    "print('Day 2 of the week is ' + daysoftheweek[1])\n",
    "print('Day 3 of the week is ' + daysoftheweek[2])"
   ]
  },
  {
   "attachments": {
    "image.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# While Loop\n",
    "* The while loop takes a collection of items and executes a block of code once for each item in the collection. \n",
    "* In contrast, the for loop runs as long as, or while, a certain condition is true.\n",
    "![image.png](attachment:image.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### The while Loop in Action\n",
    "You can use a while loop to count up through a series of numbers. For\n",
    "example, the following while loop counts from 1 to 5:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 2 3 4 5 "
     ]
    }
   ],
   "source": [
    "# while loop to print numbers from 1 to 5\n",
    "mycount = 1\n",
    "while mycount <= 5:\n",
    "    print(mycount, end = ' ')\n",
    "    mycount = mycount + 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 2 3 4 5 "
     ]
    }
   ],
   "source": [
    "#What happens if we leave off the increment portion (mycount = mycount + 1)?\n",
    "mycount = 1\n",
    "while mycount <= 5:\n",
    "    print(mycount, end = ' ')\n",
    "    mycount = mycount + 1\n",
    "#Would run infinitely without last line of code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 "
     ]
    }
   ],
   "source": [
    "# We can print a much wider array of numbers if needed (ex: 10 through 50)\n",
    "mycount = 10\n",
    "while mycount <= 50:\n",
    "    print(mycount, end = ' ')\n",
    "    mycount = mycount + 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 "
     ]
    }
   ],
   "source": [
    "#We can print specific numbers within the context of a loop (ex: even numbers between 10 and 50)\n",
    "mycount = 10\n",
    "while mycount <= 50:\n",
    "    print(mycount, end = ' ')\n",
    "    mycount = mycount + 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5 4 3 2 1 0 "
     ]
    }
   ],
   "source": [
    "#We can also count DOWN using while loops.\n",
    "mycountdown = 5\n",
    "while mycountdown >= 0:\n",
    "    print(mycountdown, end = ' ')\n",
    "    mycountdown = mycountdown - 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0 3 6 9 12 15 18 21 24 27 30 33 36 39 42 45 48 "
     ]
    }
   ],
   "source": [
    "#We can use loops to print all multiples of 3 that are less than a particular number (ex: 50)\n",
    "product = 0 \n",
    "while product < 50: \n",
    "    print(product, end = ' ')\n",
    "    product = product + 3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Practice 1: A Bit of Math and While Loops\n",
    "Use while loops to do each of the following: <br>\n",
    "i. Print all the numbers from 20 down to 10.<br>\n",
    "ii. Print all numeric squares (0, 1, 4, 9, 16, 25, etc.) less than 10^2 <br>\n",
    "iii. Print all the _two-digit_ multiples of 10 in reverse order.\n",
    " \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "20 19 18 17 16 15 14 13 12 11 10 "
     ]
    }
   ],
   "source": [
    "countdown = 20\n",
    "while countdown >= 10:\n",
    "    print(countdown, end = ' ')\n",
    "    countdown = countdown - 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0 1 4 9 16 25 36 49 64 81 "
     ]
    }
   ],
   "source": [
    "nsquares = 0\n",
    "while nsquares**2 < 10**2:\n",
    "    print(nsquares**2, end = ' ')\n",
    "    nsquares = nsquares + 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0 1 4 9 16 25 36 49 64 81 "
     ]
    }
   ],
   "source": [
    "upperbound = 10**2\n",
    "mybase = 0\n",
    "while mybase**2 < upperbound:\n",
    "    print(mybase**2, end = ' ')\n",
    "    mybase = mybase + 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0 1 4 9 16 25 36 49 64 81 "
     ]
    }
   ],
   "source": [
    "upperbound = 10**2\n",
    "mybase = 0\n",
    "while mybase < 10:\n",
    "    print(mybase**2, end = ' ')\n",
    "    mybase = mybase + 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "90 80 70 60 50 40 30 20 10 "
     ]
    }
   ],
   "source": [
    "twodigit = 90\n",
    "while twodigit >= 10:\n",
    "    print(twodigit, end = ' ')\n",
    "    twodigit = twodigit - 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "90 80 70 60 50 40 30 20 10 "
     ]
    }
   ],
   "source": [
    "lower_bound = 10\n",
    "upper_mult_of_10 = 90\n",
    "while upper_mult_of_10 >= lower_bound:\n",
    "    print(upper_mult_of_10, end = ' ')\n",
    "    upper_mult_of_10 = upper_mult_of_10 - 10"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Conditional and Repetition Statements\n",
    "* It is common to use conditional statements and repetition statements in conjunction with each other.\n",
    "* One simple option is to only execute a given while loop if a particular \"starting\" condition is met\n",
    "* Even more commonly, however, we will embed an if statement within a loop "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Please input a positive integer:  6\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 2 3 4 5 "
     ]
    }
   ],
   "source": [
    "# Count from 1 up to a given input value, but only if that value is POSITIVE\n",
    "myinputnum = int(input('Please input a positive integer: '))\n",
    "if myinputnum < 1:\n",
    "    print('I can\\'t count up to that value.')\n",
    "else:\n",
    "    mycount = 1\n",
    "    while mycount < myinputnum:\n",
    "        print(mycount, end = ' ')\n",
    "        mycount = mycount + 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 90 92 94 96 98 100 "
     ]
    }
   ],
   "source": [
    "# We can repeat our previous exercise involving even numbers using an if-statement within a while loop\n",
    "mycount = 0\n",
    "while mycount <= 100:\n",
    "    if mycount % 2 == 0:\n",
    "        print(mycount, end = ' ')\n",
    "    mycount = mycount + 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97 99 "
     ]
    }
   ],
   "source": [
    "# With a very simple change, we can modify our previous set of statements to accomodate odd numbers instead of even\n",
    "mycount = 0\n",
    "while mycount <= 100:\n",
    "    if mycount % 2 == 1:\n",
    "        print(mycount, end = ' ')\n",
    "    mycount = mycount + 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Practice 2: Using While/If Combinations\n",
    "Use while loops and if statements to accomplish each of the following tasks:\n",
    "i. Print all even numbers starting at 100 and going down to 0.\n",
    "ii. Print all three-digit, positive multiples of 5\n",
    "iii. (Optional) See if you can repeat (ii) without an if statement\n",
    " \n",
    " \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "100 98 96 94 92 90 88 86 84 82 80 78 76 74 72 70 68 66 64 62 60 58 56 54 52 50 48 46 44 42 40 38 36 34 32 30 28 26 24 22 20 18 16 14 12 10 8 6 4 2 0 "
     ]
    }
   ],
   "source": [
    "mycount = 100\n",
    "while mycount >= 0:\n",
    "    if mycount % 2 == 0:\n",
    "        print(mycount, end = ' ')\n",
    "    mycount = mycount - 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [

     ]
    }
   ],
   "source": [
    "upperbound = 999\n",
    "lowerbound = 100\n",
    "mycount = lowerbound\n",
    "while mycount <= upperbound:\n",
    "    if mycount % 5 == 0:\n",
    "        print(mycount, end = ' ')\n",
    "    mycount = mycount + 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [

     ]
    }
   ],
   "source": [
    "mycount = 100\n",
    "while mycount <= 999:\n",
    "    print(mycount, end = ' ')\n",
    "    mycount = mycount + 5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Repetition Statements and Counter/Cumulation Variables\n",
    "* A traditional practice in programming is to keep track of the number of times a while loop has executed in a separate variable\n",
    "* This becomes useful in a scenario where we are not simply counting up from 1 to a particular maximum.\n",
    "* In addition, we can use these extra variables to **cumulate** values involving a loop.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10 9 8 7 6 5 4 3 2 1 0 The loop was executed 11 times.\n"
     ]
    }
   ],
   "source": [
    "mycounter = 0\n",
    "# Count the number of times we have run through a countdown loop\n",
    "mynumber = 10\n",
    "while mynumber >= 0:\n",
    "    print(mynumber, end = ' ')\n",
    "    mynumber = mynumber - 1\n",
    "    mycounter = mycounter + 1\n",
    "print('The loop was executed ' +str(mycounter) + ' times.')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97 99 Total of 50 odd numbers.\n"
     ]
    }
   ],
   "source": [
    "# Print the odd numbers from 0 to 100, and count the total along the way\n",
    "mycounter = 0\n",
    "mynumber = 1\n",
    "while mynumber <= 100:\n",
    "    if mynumber%2 == 1:\n",
    "        print(mynumber, end = ' ')\n",
    "        mycounter = mycounter + 1\n",
    "    mynumber = mynumber + 1\n",
    "print('Total of ' +str(mycounter) + ' odd numbers.')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "3\n",
      "6\n",
      "10\n",
      "15\n",
      "21\n",
      "28\n",
      "36\n",
      "45\n",
      "55\n"
     ]
    }
   ],
   "source": [
    "# Find the sum of ALL NUMBERS between 1 and 10\n",
    "mynumber = 1\n",
    "mysum = 0\n",
    "while mynumber <= 10:\n",
    "    mysum = mysum + mynumber\n",
    "    mynumber = mynumber + 1\n",
    "    print(mysum)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Practice 3: Using Counter Variables and While/If Combinations\n",
    "Use the things we have looked at today and recently to do each of the following (Use a print statement at the end for each to verify the total is correct): <br>\n",
    "i. Find the sum of all _even_ numbers between 1 and 20\n",
    "ii. Prompt the user for an input positive integer.  1. If the number they input is not positive, tell them \"Your number is not Positive. 2. If it is positive, print back the **product** of all numbers from 1 to whatever value they input.\n",
    " \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2 6 12 20 30 42 56 72 90 110 "
     ]
    }
   ],
   "source": [
    "mynumber = 2\n",
    "mysum = 0\n",
    "while mynumber <= 20:\n",
    "    mysum = mysum + mynumber\n",
    "    mynumber = mynumber + 2\n",
    "    print(mysum, end =' ')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Please input a positive number:  7\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The product of numbers from 1 to your input value is 5040\n"
     ]
    }
   ],
   "source": [
    "usernum = int(input('Please input a positive number: '))\n",
    "if usernum <= 0:\n",
    "    print('The number inputed was not positive.')\n",
    "else:\n",
    "    myproduct = 1\n",
    "    mycounter = 1\n",
    "    while mycounter <= usernum:\n",
    "        myproduct = myproduct * mycounter\n",
    "        mycounter = mycounter + 1\n",
    "    print('The product of numbers from 1 to your input value is ' + str(myproduct))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## More on While Loops\n",
    "* Thus far we have looked at while loops in the context of numbers, arithmetic, and counting/cumulation.\n",
    "* Because while loops can consider any condition, they are actually MUCH more powerful in practice."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "\n",
      "Tell me anything and I will repeat it back to you. Enter 'quit' to end the loop:  quit\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Quitting program...\n"
     ]
    }
   ],
   "source": [
    "# We can use a while loop to keep receiving input from the user until a specific condition is met.\n",
    "prompt=\"\\nTell me anything and I will repeat it back to you. Enter \\'quit\\' to end the loop: \"\n",
    "userinput = ''\n",
    "while (userinput != 'quit'):\n",
    "    userinput = input(prompt)\n",
    "    if userinput != 'quit':\n",
    "        print('You inputed the string \\\"' + userinput + '\\\"')\n",
    "    else:\n",
    "        print('Quitting program...')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Programming Flags\n",
    "* A **flag** in programming refers to a boolean (True or False) or bit (1 or 1) variable that signals a special condition or yes/no option\n",
    "* Flags are often used as parameters to command-line programs or scripts.\n",
    "* Flags may also be used to indicate that a program should remain active (flag is True) or is finished (flag is False) with all needed actions/tasks."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Give me at most five positive numbers.  I will add their total and print it back to you.  Input a negative value or 0 to stop early: \n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Please input a positive number:  6\n",
      "Please input a positive number:  6\n",
      "Please input a positive number:  7\n",
      "Please input a positive number:  8\n",
      "Please input a positive number:  9\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "36\n"
     ]
    }
   ],
   "source": [
    "# Add UP to 5 positive numbers input by the user and print the result back to them\n",
    "prompt=\"\\nGive me at most five positive numbers.  I will add their total and print it back to you.  Input a negative value or 0 to stop early: \"\n",
    "active=True # flag\n",
    "mysum = 0\n",
    "mycounter = 0\n",
    "print(prompt)\n",
    "while (active):\n",
    "    usernumber = int(input('Please input a positive number: '))\n",
    "    if usernumber <= 0 :\n",
    "        active = False\n",
    "    else:\n",
    "        mysum = mysum + usernumber\n",
    "        mycounter = mycounter + 1\n",
    "    if mycounter >= 5:\n",
    "        active = False\n",
    "print(mysum)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Using break to Exit a Loop\n",
    "* To exit a while loop _early_ without running any remaining code, use the **break** statement.\n",
    "* The break statement may be used to provide a secondary \"way out\" of a loop given an alternative condition\n",
    "* It may also provide a means to safeguard against infinite looping in practice."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Give me at most five positive numbers.  I will add their total and print it back to you.  Input a negative value or 0 to stop early: \n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Please input a positive number:  10\n",
      "Please input a positive number:  9\n",
      "Please input a positive number:  4\n",
      "Please input a positive number:  -9\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "23\n"
     ]
    }
   ],
   "source": [
    "# We can repeat our previous example of adding together positive numbers using a break statement\n",
    "prompt=\"\\nGive me at most five positive numbers.  I will add their total and print it back to you.  Input a negative value or 0 to stop early: \"\n",
    "active=True # flag\n",
    "mysum = 0\n",
    "mycounter = 0\n",
    "print(prompt)\n",
    "while (active):\n",
    "    usernumber = int(input('Please input a positive number: '))\n",
    "    if usernumber <= 0 :\n",
    "        break;\n",
    "    mysum = mysum + usernumber\n",
    "    mycounter = mycounter + 1\n",
    "    if mycounter >= 5:\n",
    "        break;\n",
    "print(mysum)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Python Libraries\n",
    "* Python **libraries** provide additional, \"pre-packaged\" code that helps us accomplish crucial tasks in programming\n",
    "* We will make use of several key libraries throughout the semester, including some for plotting graphs, some for data storage, and some for input/output to files.\n",
    "* Our example below imports the _randint_ function from the **random** library, which will let us generate a random whole number within a given range. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# The text immediately following \"from\" indicates the library we are using.\n",
    "# The text immediately following \"import\" indicates which function or other structure we are using in our code\n",
    "from random import randint"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7\n"
     ]
    }
   ],
   "source": [
    "print(randint(1,100))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Practice 4: Guess the number (A Bit Tricky!)\n",
    "* Try to create a guessing game where the user inputs a number between 1 and 10.  If the number matches a randomly generated \"correct\" number, the program will stop and let the user know they had a correct guess.  If the number does not match it will let the user know their number didn't match and prompt them to try again.\n",
    "* The code below should get you started (the first line has the prompt, the second line will generate a random # in the range of 1 to 10, and the third initializes a flag indicating the program is initially active "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "\n",
      " Guess a number between 1 to 10:  3\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "You guessed incorrectly\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "\n",
      " Guess a number between 1 to 10:  1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "You guessed incorrectly\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "\n",
      " Guess a number between 1 to 10:  2\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "You guessed incorrectly\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "\n",
      " Guess a number between 1 to 10:  3\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "You guessed incorrectly\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "\n",
      " Guess a number between 1 to 10:  4\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "You correctly guessed the number, which was 4\n"
     ]
    }
   ],
   "source": [
    "prompt=\"\\n Guess a number between 1 to 10: \"\n",
    "number= randint(1,10)\n",
    "active= True    \n",
    "while(active):\n",
    "    myguess = int(input(prompt))\n",
    "    if myguess == number:\n",
    "        break;\n",
    "    else:\n",
    "        print('You guessed incorrectly')\n",
    "print('You correctly guessed the number, which was ' + str(number))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Practice 4 Revised: Guess the number with directional guidance\n",
    "* We can make our previous guessing game a little bit easier by providing a directional guide in cases where the # is missed (i.e. if their guess is too large, we can let them know as much)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "\n",
      " Guess a number between 1 to 10:  5\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your guess is too small.\n",
      "You guessed incorrectly\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "\n",
      " Guess a number between 1 to 10:  7\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your guess is too small.\n",
      "You guessed incorrectly\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "\n",
      " Guess a number between 1 to 10:  9\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "You guess is too large.\n",
      "You guessed incorrectly\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "\n",
      " Guess a number between 1 to 10:  8\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "You correctly guessed the number, which was 8\n"
     ]
    }
   ],
   "source": [
    "prompt=\"\\n Guess a number between 1 to 10: \"\n",
    "number= randint(1,10)\n",
    "active= True    \n",
    "while(active):\n",
    "    myguess = int(input(prompt))\n",
    "    if myguess == number:\n",
    "        break;\n",
    "    else:\n",
    "        if myguess < number:\n",
    "            print('Your guess is too small.')\n",
    "        else:\n",
    "            print('You guess is too large.')\n",
    "    print('You guessed incorrectly')\n",
    "print('You correctly guessed the number, which was ' + str(number))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Using continue in a Loop\n",
    "- On some occasions we may want to skip back to the BEGINNING of a loop's body rather than immediately breaking out\n",
    "- You can use the **continue** statement to return to the beginning of the loop (specifically, the conditional test). \n",
    "- _continue_ is best used when there is a segment of code in the loop that you may or may not want to skip"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-10 -9 -8 -7 -6 -5 -4 -3 -2 -1 1 2 3 4 5 6 7 8 9 10 "
     ]
    }
   ],
   "source": [
    "# We can \"skip\" a specific number when counting with a loop using continue\n",
    "counter = -11\n",
    "while (counter < 10):\n",
    "    counter = counter + 1\n",
    "    if counter == 0:\n",
    "        continue\n",
    "    print(counter,end = ' ')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "\n",
      "Please input a number. If positive, I will add it to a running total.  If negative, I will skip it.  Use 0 to exit. 5\n",
      "\n",
      "Please input a number. If positive, I will add it to a running total.  If negative, I will skip it.  Use 0 to exit. 6\n",
      "\n",
      "Please input a number. If positive, I will add it to a running total.  If negative, I will skip it.  Use 0 to exit. -1000\n",
      "\n",
      "Please input a number. If positive, I will add it to a running total.  If negative, I will skip it.  Use 0 to exit. -78\n",
      "\n",
      "Please input a number. If positive, I will add it to a running total.  If negative, I will skip it.  Use 0 to exit. 0\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The running total is: 11\n"
     ]
    }
   ],
   "source": [
    "# We can even \"ignore\" user inputs that don't meet a given criteria without stopping the loop entirely.\n",
    "prompt=\"\\nPlease input a number. If positive, I will add it to a running total.  If negative, I will skip it.  Use 0 to exit.\"\n",
    "active=True # flag\n",
    "sum = 0\n",
    "while (active):\n",
    "    usernum = int(input(prompt))\n",
    "    if usernum == 0:\n",
    "        break\n",
    "    elif usernum < 0:\n",
    "        continue\n",
    "    sum = sum + usernum\n",
    "print('The running total is: ' + str(sum))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Practice 5: Movie Tickets\n",
    "Your task here is to simulate a transaction for a party of movie-goers to a theater as follows:<br>\n",
    "The theater charges different ticket prices depending on a person’s age:\n",
    "- If a person is under the age of 3, the ticket is free\n",
    "- if they are between 3 and 12, the ticket is 10 dollars\n",
    "- if they are over the age 12, the ticket is 15 dollars. <br><br>\n",
    "Write a while loop in which you ask a user to the ages of all members of their party , and then tell them the **cumulative cost** of their movie tickets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Please input the ages of your movie party (or 'done' when finished):  8\n",
      "Please input the ages of your movie party (or 'done' when finished):  4\n",
      "Please input the ages of your movie party (or 'done' when finished):  90\n",
      "Please input the ages of your movie party (or 'done' when finished):  87\n",
      "Please input the ages of your movie party (or 'done' when finished):  done\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The total cost of all members of your party is: 50\n"
     ]
    }
   ],
   "source": [
    "prompt = 'Please input the ages of your movie party (or \\'done\\' when finished): '\n",
    "totalcost = 0\n",
    "active = True\n",
    "\n",
    "while active:\n",
    "    age_input = input(prompt)\n",
    "    \n",
    "    if age_input == 'done':  \n",
    "        break  \n",
    "\n",
    "    if age_input:  \n",
    "        age = int(age_input)\n",
    "    \n",
    "        if age < 3:\n",
    "            totalcost = totalcost + 0\n",
    "        elif age <= 12:  \n",
    "            totalcost = totalcost + 10\n",
    "        else:\n",
    "            totalcost = totalcost + 15\n",
    "            \n",
    "print('The total cost of all members of your party is: ' + str(totalcost))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Using a while Loop with Lists\n",
    "* Very often we want to conduct a looping operation or operations on a _collection_ of elements, as opposed to an individual element/variable.\n",
    "* While loops can be used to carry out a series of operations using a list (or possibly _on_ a list).\n",
    "* When using while loops with lists (or other collections), using a counter variable is often a necessity."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "334\n"
     ]
    }
   ],
   "source": [
    "mygrades = [90,80,72,92]\n",
    "index = 0\n",
    "sum = 0\n",
    "while index < len(mygrades):\n",
    "    sum = sum + mygrades[index]\n",
    "    index = index + 1\n",
    "print(sum)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Copying Items from One List to Another"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['a', 'b', 'c', 'd', 'e', 1, 2, 3, 4, 5]\n"
     ]
    }
   ],
   "source": [
    "mylist1 = ['a', 'b', 'c', 'd', 'e']\n",
    "mylist2 = [1, 2, 3, 4, 5]\n",
    "index = 0\n",
    "while index < len(mylist2):\n",
    "    mylist1.append(mylist2[index])\n",
    "    index = index + 1\n",
    "print(mylist1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['a', 'b', 'c', 'd', 'e', 1, 2, 3, 4, 5]\n"
     ]
    }
   ],
   "source": [
    "mylist1 = ['a', 'b', 'c', 'd', 'e']\n",
    "mylist2 = [1, 2, 3, 4, 5]\n",
    "mylist1.extend(mylist2)\n",
    "print(mylist1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Removing All Instances of Specific Values from a List"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "mywordlist = ['The','time','we','had','together','had','been','the','best','any','had','had.']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['The', 'time', 'we', 'together', 'been', 'the', 'best', 'any', 'had.']\n"
     ]
    }
   ],
   "source": [
    "index = len(mywordlist) - 1\n",
    "while index >= 0:\n",
    "    if mywordlist[index] == 'had':\n",
    "        del(mywordlist[index])\n",
    "    index = index - 1\n",
    "print(mywordlist)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Revisiting While Loops and Calculations\n",
    "* Previously we saw the use of counter/cumulator variables in performing calculations on collections of numbers.\n",
    "* We can alternatively build a list based on user input using a while loop and then perform calculations afterwards."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Please input a series of non-zero numbers. I will tell you their sum, mean, and how many #s you gave me: \n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Another number (0 to quit):  7\n",
      "Another number (0 to quit):  -7\n",
      "Another number (0 to quit):  10\n",
      "Another number (0 to quit):  -10\n",
      "Another number (0 to quit):  20\n",
      "Another number (0 to quit):  0\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[7, -7, 10, -10, 20]\n"
     ]
    }
   ],
   "source": [
    "prompt=\"\\nPlease input a series of non-zero numbers. I will tell you their sum, mean, and how many #s you gave me: \"\n",
    "active=True # flag\n",
    "listofnums = []\n",
    "print(prompt)\n",
    "while(active):\n",
    "    mynum =int(input('Another number (0 to quit): '))\n",
    "    if mynum == 0:\n",
    "        break\n",
    "    listofnums.append(mynum)\n",
    "print(listofnums)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "20\n",
      "4.0\n",
      "5\n"
     ]
    }
   ],
   "source": [
    "print(sum(listofnums))\n",
    "print(sum(listofnums)/len(listofnums))\n",
    "print(len(listofnums))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# `for` Statement\n",
    "* In Python, a principal alternative to the while loop is the **for** loop\n",
    "* Unlike the while loop, which relies on a _condition_ for starting and stopping, the for loop applies its actions for _each item_ within an **iterable collection**.\n",
    "* An iterable collection is any data type involving a group of elements with positional order (examples we have seen of these so far are lists and strings.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 4 9 16 25 "
     ]
    }
   ],
   "source": [
    "mynumlist = [1, 4, 9, 16, 25]\n",
    "for mynum in mynumlist:\n",
    "    print(mynum,end = ' ')\n",
    "\n",
    "# Safer to do this since it removes risk to accidentally run infintely with while loop."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 4 9 16 25 "
     ]
    }
   ],
   "source": [
    "mynumlist = [1, 4, 9, 16, 25]\n",
    "index = 0\n",
    "while index < 5:\n",
    "    print(mynumlist[index], end =' ')\n",
    "    index = index + 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "P\n",
      "y\n",
      "t\n",
      "h\n",
      "o\n",
      "n\n"
     ]
    }
   ],
   "source": [
    "mystr = 'Python'\n",
    "for mychar in mystr:\n",
    "    print(mychar)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "A\n",
      "B\n",
      "c\n",
      "D\n",
      "l\n"
     ]
    }
   ],
   "source": [
    "mystr = 'ABcDl'\n",
    "for mychar in mystr:\n",
    "    print(mychar)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Examining the cell above\n",
    "* Upon entering the `for` loop, Python assigns the 'P' in 'Python' to the **target variable** between keywords `for` and `in`.\n",
    "* After executing the suite, Python assigns to character the next item in the sequence (that is, the '`y`' in '`Python`'), then executes the suite again. \n",
    "* This continues so long as there are more items in the sequence."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "25\n"
     ]
    }
   ],
   "source": [
    "#We can also use for loops with variables to cumulate values just as we saw with while loops:\n",
    "\n",
    "mysum = 0\n",
    "for number in [2, -3, 0, 17, 9]: \n",
    "    mysum = mysum + number\n",
    "print(mysum)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "### Small Tangent: Function `print`’s `end` Keyword Argument \n",
    "* `print` displays its argument(s), then moves the cursor to the next line. \n",
    "* Can change this behavior with the argument `end`:\n",
    ">```python\n",
    "print(character, end='  ') \n",
    "```\n",
    "* `end` is a **keyword argument**, but it's not a Python keyword. \n",
    "* The _Style Guide for Python Code_ recommends placing no spaces around a keyword argument’s =. \n",
    "* Keyword arguments are sometimes called named arguments."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "mystr = 'Python'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Function `print`’s `sep` Keyword Argument \n",
    "* Keyword argument `sep` (short for separator) specifies the string that appears between the items that print displays. \n",
    "* A space character by default. \n",
    "* To remove the spaces, use an empty string with no characters between its quotes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10; 20; 30\n"
     ]
    }
   ],
   "source": [
    "print(10, 20, 30, sep='; ')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's use  both _while_ and _for_loops to write code to print the letters of the phrase 'Jupyter Notebook' backwards in a single line\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Practice 6: Working with a List of Strings and Loops\n",
    "Your task here is to consider the list named **commands** below, and create both i. _for loop_ and ii. _while loop_ (i.e. you'll be doing this task twice in total) to do the following:\n",
    "i. Count the cumulative total number of characters across _all_ individual words in the list\n",
    "ii. Count the number of times the word 'stop' occurs within the list.\n",
    "iii. Count the total number of _every_ four-letter word within the list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "commands = ['begin','stop','left','forward','forward','stop','right','back','back','stop','right','forward','stop','end']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "67\n"
     ]
    }
   ],
   "source": [
    "totalchars = 0\n",
    "listind = 0\n",
    "while (listind < len(commands)):\n",
    "    totalchars = totalchars + len(commands[listind])\n",
    "    listind = listind + 1\n",
    "print(totalchars)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "67\n"
     ]
    }
   ],
   "source": [
    "totalchars = 0\n",
    "for word in commands:\n",
    "    totalchars = totalchars + len(word)\n",
    "print(totalchars)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4\n"
     ]
    }
   ],
   "source": [
    "totalstops = 0\n",
    "listind = 0\n",
    "while (listind < len(commands)):\n",
    "    if commands[listind] == 'stop':\n",
    "        totalstops = totalstops + 1\n",
    "    listind = listind + 1\n",
    "print(totalstops)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4\n"
     ]
    }
   ],
   "source": [
    "totalstops = 0\n",
    "for word in commands:\n",
    "    if word == 'stop':\n",
    "        totalstops = totalstops + 1\n",
    "print(totalstops)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7\n"
     ]
    }
   ],
   "source": [
    "total4lw = 0\n",
    "listind = 0\n",
    "while (listind < len(commands)):\n",
    "    if len(commands[listind]) == 4:\n",
    "        total4lw = total4lw + 1\n",
    "    listind = listind + 1\n",
    "print(total4lw)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7\n"
     ]
    }
   ],
   "source": [
    "total4lw = 0\n",
    "for word in commands:\n",
    "    if len(word) == 4:\n",
    "        total4lw = total4lw + 1\n",
    "print(total4lw)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Built-In `range` Function and Generators\n",
    "* Creates an iterable object that represents a sequence of consecutive integer values starting from 0 and continuing up to, but **not including**, the argument value.\n",
    "* range may used in place of lists with for loops when elements are sequentially ordered\n",
    "* range may also be used in _creating_ a list using the keyword **list**."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0, 1, 2, 3]\n"
     ]
    }
   ],
   "source": [
    "print(list(range(4)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0 1 2 3 "
     ]
    }
   ],
   "source": [
    "for num in range(4):\n",
    "    print(num,end =' ')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
     ]
    }
   ],
   "source": [
    "mylistto9 = list(range(10))\n",
    "print(mylistto9)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n"
     ]
    }
   ],
   "source": [
    "sum = 0\n",
    "mylistto9 = list(range(10))\n",
    "for mynum in mylistto9:\n",
    "    sum = sum + 1\n",
    "print(sum)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Off-By-One Errors\n",
    "A logic error known as an off-by-one error occurs when you assume that `range`’s argument value is included in the generated sequence. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "2\n",
      "3\n",
      "4\n"
     ]
    },
    {
     "ename": "IndexError",
     "evalue": "list index out of range",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[30], line 3\u001b[0m\n\u001b[1;32m      1\u001b[0m mylist \u001b[38;5;241m=\u001b[39m [\u001b[38;5;241m1\u001b[39m,\u001b[38;5;241m2\u001b[39m,\u001b[38;5;241m3\u001b[39m,\u001b[38;5;241m4\u001b[39m]\n\u001b[1;32m      2\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m counter \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(\u001b[38;5;241m5\u001b[39m):\n\u001b[0;32m----> 3\u001b[0m     \u001b[38;5;28mprint\u001b[39m(mylist[counter])\n",
      "\u001b[0;31mIndexError\u001b[0m: list index out of range"
     ]
    }
   ],
   "source": [
    "mylist = [1,2,3,4]\n",
    "for counter in range(5):\n",
    "    print(mylist[counter])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "## Function `range` and 2 arguments\n",
    "* Function `range`’s two-argument version produces a sequence of consecutive integers from its first argument’s value up to, but not including, the second argument’s value\n",
    "* This is useful when we have specific _starting point_ and _stopping point_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5\n",
      "6\n",
      "7\n",
      "8\n",
      "9\n"
     ]
    }
   ],
   "source": [
    "for number in range(5, 10):\n",
    "    print(number)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "range(10, 100)\n"
     ]
    }
   ],
   "source": [
    "mylist2digits = range(10,100)\n",
    "print(mylist2digits)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "## Function `range` and 3 arguments\n",
    "* Function `range`’s three-argument version produces a sequence of integers from its first argument’s value up to, but not including, the second argument’s value, _incrementing_ by the third argument’s value (the step from one element to the next)\n",
    "* If the third argument is negative, the sequence progresses from the first argument’s value down to, but not including the second argument’s value, decrementing by the third argument’s value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "2\n",
      "4\n",
      "6\n",
      "8\n",
      "10\n",
      "12\n",
      "14\n",
      "16\n",
      "18\n"
     ]
    }
   ],
   "source": [
    "for number in range(0, 20, 2):\n",
    "    print(number)\n",
    "\n",
    "# That third arguement will tell you how much the list skips."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n",
      "8\n",
      "6\n",
      "4\n",
      "2\n"
     ]
    }
   ],
   "source": [
    "for number in range(10, 0, -2):\n",
    "    print(number)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Embedded Loops\n",
    "Just as we saw the use of nested conditional statements (i.e. \"if within an if\"), we can do similar things by embedding loops."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Ex: We can create a makeshift times table using two loops: the \"outer\" loop will control rows of the table, while the \"inner\"\n",
    "#loop will control columns\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Practice 7: Working with Ranges and Loops\n",
    "Using _range_ and _for_ loops, you are to produce the following lists. <br>\n",
    "i. A list of the first 20 squares starting at 1 (i.e. [1, 4, 9, 16, 25] <br>\n",
    "ii. A list of all numbers between 1 and 20 that are **prime** <br>\n",
    "Note that (ii) is tricky, but can be made pretty manageable through the use of a conditional check inside an embedded loop"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "celltoolbar": "Slideshow",
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
